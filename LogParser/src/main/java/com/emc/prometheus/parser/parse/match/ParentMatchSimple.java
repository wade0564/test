package com.emc.prometheus.parser.parse.match;import java.util.ArrayList;import java.util.List;public class ParentMatchSimple implements Match {	List<Match> childrenList = new ArrayList<>();	Integer currentIndex = 0;	Match parentStart;	Match parentEnd;	MatchState state = MatchState.NOT_STARTED;		String name ;		private boolean continueOnFail;		private boolean consumeTarget;		private boolean repeating ;	public String getName() {		return name;	}	public void setRepeating(boolean repeating) {		this.repeating = repeating;	}	public void setName(String name) {		this.name = name;	}	public ParentMatchSimple() {		super();	}		public ParentMatchSimple(String name) {		super();		this.name = name;	}	public ParentMatchSimple(String name,Match parentStart, Match parentEnd) {		super();		this.name= name;		this.parentStart = parentStart;		this.parentEnd = parentEnd;	}		public MatchState getState() {		return state;	}	public void setState(MatchState state) {		this.state = state;	}	public boolean isContinueOnFail() {		return continueOnFail;	}	public void setContinueOnFail(boolean continueOnFail) {		this.continueOnFail = continueOnFail;	}	@Override	public void match(String target) {		// if there is startMatch ,check		if (hasStartMatch()) {			Match startMatch = getParentStart();			if (!startMatch.getMatchState().isSuccessful()) {				startMatch.match(target);				if (!startMatch.getMatchState().isSuccessful()) {					// parent match fail					this.state = MatchState.FAIL_FINISHED;				}else{					this.state = MatchState.IN_PROGRESS_CHILDREN;				}				return ;			}		}		// start child finished && success		// traverse		while (currentIndex < childrenList.size()) {			Match child = childrenList.get(currentIndex);			child.match(target);						MatchState childState = child.getMatchState();						if(childState==MatchState.SUCCESS || childState == MatchState.IN_PROGRESS_CHILDREN|| childState==MatchState.SUCCESS_FINISHED){				this.state = MatchState.IN_PROGRESS_CHILDREN;				return  ;			}						if(childState==MatchState.FAIL || childState==MatchState.FAIL_FINISHED || (childState==MatchState.SUCCESS_NO_CONSUME_FINISHED)){				currentIndex++;				continue;			}		}		this.reset();		//do match again in case of there may be repeating child ma		while (currentIndex < childrenList.size()) {			Match child = childrenList.get(currentIndex);						if(!child.getRepeating()){				currentIndex++;				continue;			}			child.match(target);			MatchState childState = child.getMatchState();			if(childState==MatchState.SUCCESS || childState == MatchState.IN_PROGRESS_CHILDREN|| childState==MatchState.SUCCESS_FINISHED){				this.state = MatchState.IN_PROGRESS_CHILDREN;				return  ;			}						if(childState==MatchState.FAIL || childState==MatchState.FAIL_FINISHED || (childState==MatchState.SUCCESS_NO_CONSUME_FINISHED)){				currentIndex++;				continue;			}		}				this.reset();		if (hasEndMatch()) {			getParentEnd().match(target);			if (getParentEnd().getMatchState() == MatchState.SUCCESS || getParentEnd().getMatchState() == MatchState.SUCCESS_FINISHED) {				if(isConsumeTarget()){					setMatchState(MatchState.SUCCESS_FINISHED);				}else{					setMatchState(MatchState.SUCCESS_NO_CONSUME_FINISHED);				}				if (hasStartMatch()) {					getParentStart().setMatchState(MatchState.NOT_STARTED);				}			}else{				if(isContinueOnFail()){					return ;				}else {					setMatchState(MatchState.FAIL_FINISHED);				}			}		}			}	private void reset() {				this.currentIndex =0;			}	private boolean hasEndMatch() {		if (parentEnd != null) {			return true;		} else {			return false;		}	}	private boolean hasStartMatch() {		if (this.parentStart != null) {			return true;		} else {			return false;		}	}	public List<Match> getChildList() {		return childrenList;	}	public void setChildList(List<Match> childList) {		this.childrenList = childList;	}	public Integer getCurrentIndex() {		return currentIndex;	}	public void setCurrentIndex(Integer currentIndex) {		this.currentIndex = currentIndex;	}	public Match getParentStart() {		return parentStart;	}	public void setParentStart(Match parentStart) {		this.parentStart = parentStart;	}	public Match getParentEnd() {		return parentEnd;	}	public void setParentEnd(Match parentEnd) {		this.parentEnd = parentEnd;	}	public void addMatch(Match m) {		childrenList.add(m);	}	public List<Match> getChildrenList() {		return childrenList;	}	public void setChildrenList(List<Match> childrenList) {		this.childrenList = childrenList;	}	@Override	public MatchState getMatchState() {		return this.state;	}	@Override	public void setMatchState(MatchState state) {		this.state = state;	}	@Override	public boolean isConsumeTarget() {		return consumeTarget;	}	@Override	public void setConsumeTarget(boolean b) {		this.consumeTarget= b;	}	@Override	public boolean getRepeating() {		return this.repeating;	}}