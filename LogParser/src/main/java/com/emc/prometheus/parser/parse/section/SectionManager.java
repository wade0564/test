package com.emc.prometheus.parser.parse.section;import com.emc.prometheus.parser.parse.match.Match;import com.emc.prometheus.parser.parse.match.ParentMatchSimple;import com.emc.prometheus.parser.pojo.LOG_FILE_TYPE;import com.emc.prometheus.parser.pojo.ParsedLogs;public class SectionManager {	public static Match getAsupLayout(ParsedLogs parsedLogs) {		ParentMatchSimple layoutTarget = new ParentMatchSimple("ASUP");				//the order of the matches can refer to  RootLayoutManager in Whitcher Parser 		layoutTarget.addMatch(BiosSectionManager.getManagerSection(parsedLogs));		layoutTarget.addMatch(MessagesSectionManager.getManagerSection(parsedLogs));		layoutTarget.addMatch(KernelInfoLogSectionManager.getManagerSection(parsedLogs));		layoutTarget.addMatch(VtlInfoSectionManager.getManagerSection(parsedLogs));		layoutTarget.addMatch(KernelErrorLogSectionManager.getManagerSection(parsedLogs));				return layoutTarget;	}		public static Match getMessageLayout(ParsedLogs parsedLogs) {		return MessagesSectionManager.getSingleManagerSection(parsedLogs);	}	public static Match getKernInfoLayout(ParsedLogs parsedLogs) {		return KernelInfoLogSectionManager.getSingleManagerSection(parsedLogs);	}		public static Match getBiosLayout(ParsedLogs parsedLogs) {		return BiosSectionManager.getSingleManagerSection(parsedLogs);	}		public static Match getVtlInfoLayout(ParsedLogs parsedLogs) {		return VtlInfoSectionManager.getSingleManagerSection(parsedLogs);	}	public static Match getRootSection(ParsedLogs parsedLogs, LOG_FILE_TYPE logFileType) {				Match  root = null;				switch (logFileType) {		case ASUP:			root = getAsupLayout(parsedLogs);			break;		case KERN_INFO:			root = getKernInfoLayout(parsedLogs);			break;		case MESSAGES_ENGINEERING:			root = getMessageLayout(parsedLogs);			break;		case BIOS:			root = getBiosLayout(parsedLogs);			break;		case VTL_INFO:			root= getVtlInfoLayout(parsedLogs);		default:			break;		}		return root;	}}