package wade.project.asupqueuing.dao;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.IOException;import java.math.BigInteger;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import javax.annotation.PostConstruct;import javax.sql.DataSource;import org.postgresql.Driver;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.dao.DataAccessException;import org.springframework.jdbc.core.RowMapper;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.jdbc.datasource.DataSourceTransactionManager;import org.springframework.jdbc.datasource.DataSourceUtils;import org.springframework.stereotype.Repository;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.support.DefaultTransactionDefinition;import wade.project.asupqueuing.pojo.ASUPQUEUEOBJ_STATUS;import wade.project.asupqueuing.pojo.AsupQueueObj;@Repositorypublic class GpUploadDao extends JdbcDaoSupport {	private enum ASUPQUEUE {		id, asupid, file_name, file_type, file_source, sn, model_str, ddos_ver, parse_status	}		private final static Logger log = LoggerFactory			.getLogger(GpUploadDao.class);	private static String schema = "asup";		private static String ausp_queue="asup_queue";	private static Connection dbConn;	@Autowired	@Qualifier("dataSource")	DataSource dataSource;	public GpUploadDao() {	}	@SuppressWarnings("unused")	@PostConstruct	private void initialize() {		setDataSource(dataSource);	}	public List<String> getUniqueAsupID(String asup_unique_id) {		String sql = "select asup_unique_id from asup.asup where asup_unique_id ='"				+ asup_unique_id + "'";		long timeTestStart = System.currentTimeMillis();		System.out.println(sql);		List<String> asupUniqueId = getJdbcTemplate().queryForList(sql,				String.class);		long timeTestEnd = System.currentTimeMillis();// 记录结束时间		System.out.println("运行时间是" + (timeTestEnd - timeTestStart));		return asupUniqueId;	}		public void testBatchUpdate() {		String sql = "INSERT INTO asup.asup ( asupid,filename,type,asup_unique_id ) SELECT asupid,filename,type,asup_unique_id FROM asup.asup_test";		getJdbcTemplate().batchUpdate(new String[] { sql });	}		public List<AsupQueueObj> getAsupQueueObjs(Integer limit) {		String sql = "";		sql ="select * from asup.asup_queue limit 20";		Driver.setLogLevel(Driver.DEBUG);		List<AsupQueueObj> AsupQueueObjs = getJdbcTemplate().query(sql, new RowMapper<AsupQueueObj>(){			public AsupQueueObj mapRow(ResultSet rs, int rowNum)					throws SQLException {				AsupQueueObj o =new AsupQueueObj();				o.setId(BigInteger.valueOf(rs.getLong(ASUPQUEUE.id.toString())));				o.setFilehandle( rs.getString(ASUPQUEUE.file_name.toString()));				o.setParse_status(rs.getString(ASUPQUEUE.parse_status.toString()));				o.setFileSource( rs.getString(ASUPQUEUE.file_source.toString()));				o.setSn(rs.getString(ASUPQUEUE.sn.toString()));				if(rs.getString(ASUPQUEUE.model_str.toString()).equals("")){					System.out.println(rs.getString(ASUPQUEUE.model_str.toString()));				}				o.setModel(rs.getString(ASUPQUEUE.model_str.toString()));				o.setFileType(rs.getString(ASUPQUEUE.file_type.toString()));				o.setDdosVer(rs.getString(ASUPQUEUE.ddos_ver.toString()));				return o;			}					});		return AsupQueueObjs;	}		public String[] genUpdateSql(Map<BigInteger,AsupQueueObj>  queueMap) {						String[] sqls = new String[queueMap.size()+1];		Iterator iter = queueMap.entrySet().iterator();		BigInteger asupid;		int index = 0;		String delIDs ="";		while (iter.hasNext()) {						String sql = "";			Map.Entry entry = (Entry) iter.next();			BigInteger id = (BigInteger) entry.getKey();			delIDs+=id+",";			AsupQueueObj asupQueueObj = (AsupQueueObj) entry.getValue();			String parse_status = asupQueueObj.getParse_status();			if (parse_status.equals(ASUPQUEUEOBJ_STATUS.READY.toString())) {				asupQueueObj.setParse_status( ASUPQUEUEOBJ_STATUS.PARSE_FAILD);			}			sql = "insert into asup.asup_queue(file_name,asupid,file_type ,file_source,sn,model_str ,ddos_ver,parse_status) values ("					+ "'"+asupQueueObj.getFilehandle()+"',"					+asupQueueObj.getAsupid()+",'"					+asupQueueObj.getFileType()+"','"					+asupQueueObj.getFileSource()+"','"					+asupQueueObj.getSn()+"','"					+asupQueueObj.getModel()+"','"					+asupQueueObj.getDdosVer()+"','"					+asupQueueObj.getParse_status()+");";			sqls[index] = sql;			index++;		}				sqls[index]="delete from asup.asup_queue where id in("+delIDs.replaceAll(",$","" )+");";						return sqls;	}	public void writeToExternalFile(Map<BigInteger, AsupQueueObj> queueMap) throws IOException {	Iterator iter = queueMap.entrySet().iterator();		BufferedWriter bw =new BufferedWriter(new FileWriter("c:/tmp/test"));int index=queueMap.size();	while (iter.hasNext()) {				String writeString = "";		Map.Entry entry = (Entry) iter.next();		AsupQueueObj asupQueueObj = (AsupQueueObj) entry.getValue();		String parse_status = asupQueueObj.getParse_status();		if (parse_status==null) {			asupQueueObj.setParse_status( ASUPQUEUEOBJ_STATUS.PARSE_FAILD);		}		String asupID="\\N";		if(asupQueueObj.getAsupid()!=null){			asupID=asupQueueObj.getAsupid()+"";		};		index--;		if(index!=0){			writeString =asupID+"|"+asupQueueObj.getFilehandle()+"|"+asupQueueObj.getFileType()+"|"+asupQueueObj.getFileSource()+"|"+asupQueueObj.getSn()+"|"+asupQueueObj.getModel()+"|"+asupQueueObj.getDdosVer()+"|"+asupQueueObj.getParse_status()+"\n";		}else {			writeString =asupID+"|"+asupQueueObj.getFilehandle()+"|"+asupQueueObj.getFileType()+"|"+asupQueueObj.getFileSource()+"|"+asupQueueObj.getSn()+"|"+asupQueueObj.getModel()+"|"+asupQueueObj.getDdosVer()+"|"+asupQueueObj.getParse_status();		}		bw.write(writeString);			}	bw.close();		}	public void createExternalTable() throws SQLException {				        Connection conn =DataSourceUtils.getConnection(dataSource);        		try {			conn.setAutoCommit(false);//			String sql = "create external table asup.test2 (id character varying) LOCATION ('gpfdist://10.25.192.33:8080/NETSHOW_STATS_ACTIVE_INTERNET_CONN_1397552105454') FORMAT 'text' (delimiter '|' );";			String sql = "create external table asup.a (id character varying) LOCATION ('gpfdist://10.25.192.33:8080/NETSHOW_STATS_ACTIVE_INTERNET_CONN_1397552105454') FORMAT 'text' (delimiter '|' );";			getJdbcTemplate().update(sql);			try {				Thread.sleep(60*1000);			} catch (InterruptedException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}//			String  sql4="select count(*) from asup.asup1 limit 1";//			getJdbcTemplate().queryForInt(sql4);//			String sql3 = "drop external table a";//			getJdbcTemplate().update(sql3);//			transactionManager.commit(status);			conn.commit();//			if(true)//				throw new SQLException();		} catch ( DataAccessException  e) {			conn.rollback();;			e.printStackTrace();		}	}	public void transaction() throws SQLException {				        		DataSourceTransactionManager  transactionManager =                 new DataSourceTransactionManager(dataSource);            // 建立事务的定义    		DefaultTransactionDefinition  def = new DefaultTransactionDefinition();            def.setPropagationBehavior(  TransactionDefinition.PROPAGATION_REQUIRED); 				TransactionStatus status=transactionManager.getTransaction(def);        		try {//			String sql = "create external table asup.test2 (id character varying) LOCATION ('gpfdist://10.25.192.33:8080/NETSHOW_STATS_ACTIVE_INTERNET_CONN_1397552105454') FORMAT 'text' (delimiter '|' );";			String sql = "create external table asup.a (id character varying) LOCATION ('gpfdist://10.25.192.33:8080/NETSHOW_STATS_ACTIVE_INTERNET_CONN_1397552105454') FORMAT 'text' (delimiter '|' );";			getJdbcTemplate().update(sql);			String  sql4="select count(*) from asup.asup limit 1";			getJdbcTemplate().queryForInt(sql4);//			String sql3 = "drop external table a";//			getJdbcTemplate().update(sql3);			transactionManager.commit(status);//			if(true)//				throw new SQLException();		} catch ( DataAccessException  e) {			transactionManager.rollback(status);			e.printStackTrace();		}	}public void insert() {	String sql ="insert into asup.a values ('1')";//	String sql2 ="insert into asup.a  select * from asup.asup";	String sql3= "insert asupid into asup.asup ('1')";	Driver.setLogLevel(Driver.INFO);	getJdbcTemplate().batchUpdate(new String []{sql,sql3});}	}